#!/usr/bin/env python3

import argparse,os,sys,re,logging

class TVDownloader:
    def __init__(self, args):
        self.args = args
        self.engines = []

    def import_engines(self, directory):
        names = [filename[:-3] for filename in os.listdir(directory)
            if filename.endswith('.py') and not filename.startswith('_')]
        engines = __import__("engines", fromlist=names)
        for name in names:
            module = getattr(engines, name)
            engine = getattr(module, '{}Engine'.format(name.capitalize()))
            self.engines.append((module.__desc__, module.__url__, engine))
    
    def get_engine(self, url):
        for e in self.engines:
            if re.match(e[1], url):
                return e

    def main(self):
        codedir = os.path.dirname(os.path.realpath(os.path.abspath(__file__)))
        self.import_engines('{}/engines'.format(codedir))
        e = self.get_engine(self.args.URL)[2](self.args.URL)
    
        if self.args.movie == "list":
            for m in e.movies():
                print(m[0]+'\t'+m[1], file=sys.stderr)
            return
    
        if self.args.quality == "list":
            for q in e.qualities():
                print(q[0]+'\t'+q[1], file=sys.stderr)
            return
    
        d = e.download(self.args.quality, self.args.movie)
    
        if d[0] == 'error':
            print("Chyba: "+d[1], file=sys.stderr)
            return False
    
        if self.args.get_url:
            url = d[2]['url']
    
            if 'playpath' in d[2]:
                url += ' playpath={}'.format(d[2]['playpath'])
            
            if 'app' in d[2]:
                url += ' app={}'.format(d[2]['app'])
    
            print(url)
            return
       
        prefix = '' # TODO xdg file structure?
        outfile = self.args.output if self.args.output else os.path.join(prefix, d[1])
        self.download(d, outfile)
    
    @classmethod
    def download(cls, d, outfile):
        if d[0] == 'rtmp':
            args = ''
            parms = d[2]
            if 'playpath' in parms:
                args += ' -y "{}"'.format(parms['playpath'])
                
            if 'app' in parms:
                args += ' -a "{}"'.format(parms['app'])
    
            if 'rtmpdump_args' in parms:
                args += ' '+parms['rtmpdump_args']
    
            cmd = 'rtmpdump -r "{}" -o "{}" {}'.format(parms['url'], outfile, args)
            print('Spoustim '+cmd)
            os.system(cmd)

if __name__ == "__main__":      
    parser = argparse.ArgumentParser(description='Stahuje televizní pořady.')
    parser.add_argument('URL', action="store")
    parser.add_argument('-g', '--get-url', action="store_true", help="nestahuje, použe vypíše URL adresu videa (dá se použít v některých přehrávačích)")
    parser.add_argument('-q', '--quality', action="store", help="nastavuje kvalitu (list pro vypsání možností)")
    parser.add_argument('-m', '--movie', action="store", help="vybírá video ze stránky (list pro vypsání možností)")
    parser.add_argument('-o', '--output', action="store", help="nastavuje výstupní soubor")
    parser.add_argument('-D', '--debug', action="store_true", help="zapíná debugovací zprávy")
    args = parser.parse_args()

    if args.debug:
        log = logging.getLogger()
        log.setLevel(logging.DEBUG)

    log.debug('')
    log.debug('Arguments:')
    for item in args.__dict__.items():
        log.debug(' * {0} = {1}'.format(*item))
    
    downloader = TVDownloader(args)
    downloader.main()
